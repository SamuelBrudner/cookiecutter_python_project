#!/bin/bash
# shellcheck disable=SC2317
# Updated to support safe sourcing

# Handle sourced vs executed usage
(return 0 2>/dev/null) && SOURCED=1 || SOURCED=0
if [ "$SOURCED" -eq 1 ]; then
    RUN_SETUP=0
else
    RUN_SETUP=1
fi

# Helper to exit or return safely
safe_exit() {
    local code=$1
    if [ "$SOURCED" -eq 1 ]; then
        return "$code"
    else
        exit "$code"
    fi
}

# Debug logging when DEBUG=1
debug() {
    if [ "${DEBUG:-0}" -eq 1 ]; then
        echo "[DEBUG] $*" >&2
    fi
}
# setup_env.sh - Environment setup for {{ cookiecutter.project_name }}
# Generated by cookiecutter-python-project
# DO NOT EDIT THIS FILE DIRECTLY - IT WILL BE OVERWRITTEN BY COOKIECUTTER

# --- Configuration ---
# These variables are populated by cookiecutter during project generation
PROJECT_NAME="{{ cookiecutter.project_name }}"
PROJECT_SLUG="{{ cookiecutter.project_slug }}"
PYTHON_VERSION="{{ cookiecutter.python_version }}"
AUTHOR_NAME="{{ cookiecutter.author_name }}"
AUTHOR_EMAIL="{{ cookiecutter.author_email }}"

# --- Constants ---
VERSION="0.1.0"
ENV_NAME="${PROJECT_SLUG}-dev"
ENV_PATH_DEV="${PWD}/dev-env"
ENV_PATH_PROD="${PWD}/prod-env"
ENV_PATH="${ENV_PATH_DEV}"

# --- Default values ---
RUN_TESTS=true
VERBOSE=false
FORCE=false
SKIP_CONDA=false
SKIP_PRE_COMMIT=false
SKIP_TESTS=false
SKIP_LOCK=false
DEV_MODE=false
CLEAN_INSTALL=false
SKIP_CHECKS=false

# --- Command line arguments ---
# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --no-tests)
            SKIP_TESTS=true
            RUN_TESTS=false
            shift
            ;;
        --skip-conda)
            SKIP_CONDA=true
            shift
            ;;
        --skip-pre-commit)
            SKIP_PRE_COMMIT=true
            shift
            ;;
        --skip-lock)
            SKIP_LOCK=true
            shift
            ;;
        --skip-checks)
            SKIP_CHECKS=true
            shift
            ;;
        --run-setup)
            RUN_SETUP=1
            shift
            ;;
        --dev)
            DEV_MODE=true
            shift
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --clean-install)
            CLEAN_INSTALL=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            echo "Setup script for ${PROJECT_NAME}"
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --no-tests          Skip running tests after setup"
            echo "  --skip-conda         Skip conda environment setup"
            echo "  --skip-pre-commit    Skip pre-commit installation"
            echo "  --skip-lock          Skip conda-lock generation"
            echo "  --skip-checks       Skip environment checks"
            echo "  --dev                Use development environment"
            echo "  --force              Force operations that would normally prompt"
            echo "  --clean-install      Remove existing env before creation"
            echo "  --run-setup          Force running setup when sourced"
            echo "  -v, --verbose        Show more detailed output"
            echo "  -h, --help           Show this help message"
            echo ""
            echo "Environment will be created at: ${ENV_PATH}"
            exit 0
            ;;
        *)
            echo "Unknown parameter: $1"
            exit 1
            ;;
    esac
done

# Exit on error, unset variables, and pipe failures when executing
if [ "$SOURCED" -eq 0 ] || [ "$RUN_SETUP" -eq 1 ]; then
    set -euo pipefail
fi

# Source utility functions
UTILS_SCRIPT="${BASH_SOURCE[0]%/*}/setup_utils.sh"
if [ ! -f "$UTILS_SCRIPT" ]; then
    echo -e "\033[1;31m✗ Error: Could not find setup_utils.sh\033[0m" >&2
    exit 1
fi
# shellcheck source=setup_utils.sh
source "$UTILS_SCRIPT"

# Source function modules
MODULES_DIR="${BASH_SOURCE[0]%/*}/modules"
for module in setup_conda create_environment install_packages setup_pre_commit ensure_conda_lock generate_conda_lock; do
    module_file="${MODULES_DIR}/${module}.sh"
    if [ -f "$module_file" ]; then
        # shellcheck source=/dev/null
        source "$module_file"
    else
        echo -e "\033[1;31m✗ Error: Missing module $module_file\033[0m" >&2
        exit 1
    fi
done

# Enhanced logging
log() {
    local level=$1
    shift
    local message="[$(date +'%Y-%m-%d %H:%M:%S')] [${PROJECT_SLUG}] [$level] $*"
    case $level in
        debug)
            $VERBOSE && echo -e "${BLUE}${message}${NC}" >&2
            ;;
        info)
            echo -e "${BLUE}${message}${NC}"
            ;;
        success)
            echo -e "${GREEN}✓ ${message}${NC}"
            ;;
        warning)
            echo -e "${YELLOW}⚠️  ${message}${NC}" >&2
            ;;
        error)
            echo -e "${RED}✗ ${message}${NC}" >&2
            exit 1
            ;;
        *)
            echo "${message}" >&2
            ;;
    esac
}

# Source optional path definitions
setup_paths() {
    local paths_file="${SCRIPT_DIR}/paths.sh"
    if [ -f "$paths_file" ]; then
        # shellcheck source=/dev/null
        source "$paths_file"
    fi
}

# Generate Makefile path includes if supported
generate_makefile_paths() {
    local mk_script="${SCRIPT_DIR}/../scripts/generate_makefile_paths.sh"
    if [ -x "$mk_script" ]; then
        "$mk_script"
    fi
}

# Abort if the target environment is currently active
check_not_in_active_env() {
    if [ -n "${CONDA_PREFIX:-}" ] && [ "$(realpath "${CONDA_PREFIX}")" = "$(realpath "${ENV_PATH}")" ]; then
        log "error" "The environment at ${ENV_PATH} is currently active. Please deactivate it before running this setup."
    fi
}

# --- Main Script ---

if [ "$SOURCED" -eq 1 ] && [ "$RUN_SETUP" -ne 1 ]; then
    debug "Script sourced, not running setup. Use 'source $0 --run-setup' to force setup."
    return 0 2>/dev/null
fi

log "info" "Starting ${PROJECT_NAME} environment setup"
log "debug" "Python version: ${PYTHON_VERSION}"
log "debug" "Environment path: ${ENV_PATH}"

if [ "$SKIP_CHECKS" = false ]; then
    check_not_in_active_env
fi

# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source additional path configuration if available
setup_paths

# Generate Makefile path include if script exists
generate_makefile_paths

if [ "$SKIP_CHECKS" = false ]; then
    # Check for required commands
    check_command() {
        if ! command -v "$1" >/dev/null 2>&1; then
            log "error" "Required command not found: $1"
        fi
    }

    # Verify required commands are available
    for cmd in conda python pip; do
        check_command "$cmd"
    done
fi

# --- Main Script Logic ---

# Setup environment directory
if [ -d "${ENV_PATH}" ] && [ "${FORCE}" = false ]; then
    log "info" "Using existing environment at ${ENV_PATH}"
else
    if [ -d "${ENV_PATH}" ] && [ "${FORCE}" = true ]; then
        log "warning" "Removing existing environment at ${ENV_PATH} (--force)"
        rm -rf "${ENV_PATH}"
    fi
fi

section "Setting up ${PROJECT_NAME} environment in ${ENV_PATH}"


# --- Conda Setup ---
# Functions are sourced from modules in the modules/ directory

# --- Main Execution ---

# Run setup steps
setup_conda
create_environment
install_packages
setup_pre_commit
generate_conda_lock

# --- Post-Setup Information ---
section "${PROJECT_NAME} Setup Complete!"
echo -e "\n${GREEN}✓ Environment setup completed successfully!${NC}"
echo -e "\n${YELLOW}Next steps:${NC}"
echo -e "1. Activate the environment:"
echo -e "   ${BLUE}conda activate ${ENV_PATH}${NC}"
echo -e "2. Run the test suite:"
echo -e "   ${BLUE}pytest${NC}"
echo -e "3. Start developing!"

# Run tests if requested
if [ "${SKIP_TESTS}" = false ]; then
    section "Running tests"
    if command -v pytest &> /dev/null; then
        run_command_verbose pytest -v --cov=. --cov-report=term-missing
    else
        log "warning" "pytest not found. Install it with 'conda install pytest'"
    fi
fi

echo -e "\n${GREEN}Setup complete! Happy coding! 🚀${NC}"

# Environment file to use
log "info" "Determining which environment file to use"
ENV_FILE_DEV="${SCRIPT_DIR}/environment-dev.yml"
ENV_FILE_BASE="${SCRIPT_DIR}/environment.yml"
ENV_FILE_TO_USE=""

if [ "$DEV_MODE" = true ]; then
    ENV_FILE_TO_USE="${ENV_FILE_DEV}"
    ENV_PATH="${ENV_PATH_DEV}"
    echo -e "${YELLOW}Using development environment file: ${ENV_FILE_TO_USE##*/}${NC}"
elif [ -f "${ENV_FILE_DEV}" ]; then
    ENV_FILE_TO_USE="${ENV_FILE_DEV}"
    ENV_PATH="${ENV_PATH_DEV}"
    echo -e "${YELLOW}Using development environment file: ${ENV_FILE_TO_USE##*/}${NC}"
elif [ -f "${ENV_FILE_BASE}" ]; then
    ENV_FILE_TO_USE="${ENV_FILE_BASE}"
    ENV_PATH="${ENV_PATH_PROD}"
    echo -e "${YELLOW}Using base environment file: ${ENV_FILE_TO_USE##*/}${NC}"
else
    error "Neither development ('${ENV_FILE_DEV##*/}') nor base ('${ENV_FILE_BASE##*/}') environment file found in ${SCRIPT_DIR}"
fi

# Create or update environment in the selected directory
if [ ! -d "${ENV_PATH}" ]; then
    log "info" "Creating new conda environment at ${ENV_PATH}"
    section "Creating new environment from ${ENV_FILE_TO_USE##*/}"
    run_command_verbose conda env create -f "${ENV_FILE_TO_USE}" --prefix "${ENV_PATH}"
    if [ $? -eq 0 ]; then
        log "success" "Successfully created conda environment"
    else
        log "error" "Failed to create conda environment"
        exit 1
    fi
else
    log "info" "Updating existing conda environment at ${ENV_PATH}"
    section "Updating existing environment from ${ENV_FILE_TO_USE##*/}"
    run_command_verbose conda env update -f "${ENV_FILE_TO_USE}" --prefix "${ENV_PATH}" --prune
    if [ $? -eq 0 ]; then
        log "success" "Successfully updated conda environment"
    else
        log "error" "Failed to update conda environment"
        exit 1
    fi
fi

# Install project package and development tools
log "info" "Installing project package in development mode"
section "Installing project package and development tools into '${ENV_PATH}'"

log "info" "Running: conda run --prefix ${ENV_PATH} pip install -e ${SCRIPT_DIR}[dev]"
run_command_verbose conda run --prefix "${ENV_PATH}" pip install -e "${SCRIPT_DIR}[dev]"
if [ $? -eq 0 ]; then
    log "success" "Successfully installed project package in development mode"
else
    log "error" "Failed to install project package"
    exit 1
fi

log "info" "Setting up pre-commit hooks..."
if ! conda run --prefix "${ENV_PATH}" pre-commit --version &> /dev/null; then
    log "warning" "pre-commit not found in environment '${ENV_PATH}'. Installing..."
    run_command_verbose conda run --prefix "${ENV_PATH}" pip install pre-commit
    if [ $? -eq 0 ]; then
        log "success" "Successfully installed pre-commit"
    else
        log "error" "Failed to install pre-commit"
        exit 1
    fi
fi
log "info" "Installing pre-commit hooks..."
run_command_verbose conda run --prefix "${ENV_PATH}" pre-commit install --install-hooks
if [ $? -eq 0 ]; then
    log "success" "Successfully installed pre-commit hooks"
else
    log "warning" "Failed to install some pre-commit hooks (this might be expected in some environments)"
fi

section "Managing conda-lock.yml for reproducibility"
log "info" "Checking for conda-lock..."
if ! command -v conda-lock &> /dev/null; then
    log "warning" "conda-lock not found in PATH. Attempting to install..."
    if conda install -n base -y -c conda-forge conda-lock; then
        log "success" "Successfully installed conda-lock via conda"
    else
        log "warning" "Failed to install conda-lock via conda. Trying pip..."
        if pip install conda-lock; then
            log "success" "Successfully installed conda-lock via pip"
        else
            log "warning" "Failed to install conda-lock via pip. Skipping lock file generation."
        fi
    fi
    
    if ! command -v conda-lock &> /dev/null; then
        log "warning" "conda-lock still not available after installation attempts. Skipping lock file generation."
    fi
else
    log "info" "Found conda-lock: $(conda-lock --version 2>/dev/null || echo 'version unknown')"
fi

if command -v conda-lock &> /dev/null; then
    log "info" "Determining platform for conda-lock..."
    PLATFORM=""
    case "$(uname -s)" in
        Darwin*)
            if [ "$(uname -m)" = "arm64" ]; then 
                PLATFORM="osx-arm64"
                log "info" "Detected Apple Silicon (arm64) platform"
            else 
                PLATFORM="osx-64"
                log "info" "Detected Intel Mac platform"
            fi
            ;;
        Linux*) 
            PLATFORM="linux-64"
            log "info" "Detected Linux platform"
            ;;
        *) 
            log "warning" "Unsupported platform for conda-lock: $(uname -s)"
            ;;
    esac

    if [ -n "$PLATFORM" ]; then
        log "info" "Creating temporary environment file for conda-lock..."
        TEMP_ENV_FILE_FOR_LOCK="${SCRIPT_DIR}/.temp_env_for_lock.yml"
        
        # Create a clean copy without editable installs
        if ! cp "${ENV_FILE_TO_USE}" "${TEMP_ENV_FILE_FOR_LOCK}"; then
            log "error" "Failed to create temporary environment file"
            exit 1
        fi
        
        # Remove editable installs which can cause issues with conda-lock
        if ! sed -i.bak '/^[[:space:]]*-e[[:space:]]/d' "${TEMP_ENV_FILE_FOR_LOCK}" 2>/dev/null; then
            # Try without .bak for macOS
            if ! sed -i '' '/^[[:space:]]*-e[[:space:]]/d' "${TEMP_ENV_FILE_FOR_LOCK}" 2>/dev/null; then
                log "warning" "Failed to clean editable installs from temp file"
            fi
        fi
        
        # Clean up backup file if it exists
        rm -f "${TEMP_ENV_FILE_FOR_LOCK}.bak" 2>/dev/null || true

        log "info" "Generating conda-lock.yml for platform: $PLATFORM"
        LOCK_FILE_PATH="${SCRIPT_DIR}/conda-lock.yml"
        
        # Run conda-lock with verbose output
        log "info" "Running: conda-lock lock -f ${TEMP_ENV_FILE_FOR_LOCK} -p ${PLATFORM} --lockfile ${LOCK_FILE_PATH}"
        if conda-lock lock -f "${TEMP_ENV_FILE_FOR_LOCK}" -p "$PLATFORM" --lockfile "${LOCK_FILE_PATH}"; then
            log "success" "Successfully generated ${LOCK_FILE_PATH} for ${PLATFORM}"
        else
            log "warning" "Failed to generate conda-lock.yml"
        fi
        
        # Clean up temporary file
        rm -f "${TEMP_ENV_FILE_FOR_LOCK}"
    fi
else
    log "info" "Skipping conda-lock generation (not available)"
fi

section "Environment setup complete!"
echo -e "\n${GREEN}✓ Environment '${ENV_PATH}' is ready to use!${NC}"

section "Verification"
log "info" "Environment setup complete. Running verification..."

# Generate pre-commit config from template if needed
generate_precommit_config() {
    local template_file="${SCRIPT_DIR}/.pre-commit-config.template.yaml"
    local output_file="${SCRIPT_DIR}/.pre-commit-config.yaml"
    
    if [ ! -f "$template_file" ]; then
        log "warning" "Pre-commit template not found at $template_file"
        return 0
    fi
    
    # Only generate if output doesn't exist or template is newer
    if [ ! -f "$output_file" ] || [ "$template_file" -nt "$output_file" ]; then
        log "info" "Generating pre-commit configuration..."
        
        # Get conda prefix (base directory)
        local conda_prefix
        conda_prefix=$(conda info --base 2>/dev/null || echo "$HOME/anaconda3")
        
        # Create the pre-commit config from template
        if sed -e "s|{{CONDA_PREFIX}}|${conda_prefix}|g" \
               -e "s|{{ENV_PATH}}|${ENV_PATH}|g" \
               "$template_file" > "$output_file"; then
            log "success" "Generated pre-commit configuration at $output_file"
        else
            log "warning" "Failed to generate pre-commit configuration"
            return 1
        fi
    else
        log "info" "Pre-commit configuration is up to date"
    fi
}

# Generate the pre-commit config
generate_precommit_config

# Run tests if requested
if [ "$RUN_TESTS" = true ]; then
    log "info" "Running test suite using environment '${ENV_PATH}'..."
    if conda run --prefix "${ENV_PATH}" pytest -v --cov=. --cov-report=term-missing; then
        log "success" "All tests passed!"
    else
        log "warning" "Some tests failed. This might be expected depending on your setup."
        echo -e "\n${YELLOW}You can run the tests again later with:${NC}"
        echo -e "  conda activate \"${ENV_PATH}\" && pytest -v --cov=. --cov-report=term-missing"
    fi
else
    log "info" "Skipping test run as requested (--no-tests flag was used)."
fi

# Always show activation instructions
section "Environment Setup Complete"
log "success" "The project environment has been successfully configured!"

echo -e "\n${GREEN}Activation Instructions:${NC}"
echo -e "${YELLOW}To activate the environment, run:${NC}"
echo -e "  conda activate \"${ENV_PATH}\""

echo -e "\n${YELLOW}For scripts and non-interactive usage (recommended for batch jobs/CI):${NC}"
echo -e "  conda run -p \"${ENV_PATH}\" your_script.py"

echo -e "\n${YELLOW}To run tests:${NC}"
echo -e "  conda run -p \"${ENV_PATH}\" pytest tests/"

echo -e "\n${YELLOW}Or add this to your shell profile (e.g., .bashrc, .zshrc) for easier activation:${NC}"
echo -e "  alias activate_project='conda activate \"${ENV_PATH}\"'"

echo -e "\n${GREEN}Happy coding! 🚀${NC}"
safe_exit 0
