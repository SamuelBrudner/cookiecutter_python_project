#!/bin/bash
# setup_utils.sh - Utility functions and constants for {{ cookiecutter.project_slug }} setup
# Generated by cookiecutter-python-project
# DO NOT EDIT THIS FILE DIRECTLY - IT WILL BE OVERWRITTEN BY COOKIECUTTER

# --- Colors for output ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[1;34m'
NC='\033[0m' # No Color

# --- Project Configuration ---
PROJECT_NAME="{{ cookiecutter.project_name }}"
PROJECT_SLUG="{{ cookiecutter.project_slug }}"
PYTHON_VERSION="{{ cookiecutter.python_version }}"

# --- Helper Functions ---

# Function to print section headers
# Usage: section "My Section Title"
section() {
    if [ -z "$1" ]; then
        echo -e "\n${RED}Error: section() requires a title.${NC}" >&2
        return 1
    fi
    echo -e "\n${GREEN}=== $1 ===${NC}"
}

# Function to handle and print errors, then exit
# Usage: error "Something went wrong"
error() {
    if [ -z "$1" ]; then
        echo -e "${RED}An unspecified error occurred.${NC}" >&2
    else
        echo -e "${RED}Error in ${PROJECT_NAME} setup: $1${NC}" >&2
    fi
    echo -e "${YELLOW}For help, run: $0 --help${NC}" >&2
    exit 1
}

# Function to run a command with verbose output and error handling
# Usage: run_command_verbose my_command arg1 arg2
run_command_verbose() {
    if [ "$#" -eq 0 ]; then
        error "run_command_verbose: No command provided."
    fi
    echo -e "${BLUE}[${PROJECT_SLUG}]${NC} ${YELLOW}Running: $@${NC}"
    if ! "$@"; then
        error "Command failed with exit code $?: '$*'"
    fi
}

# This makes the script safe to source and prevents it from executing
# commands if it's run directly, other than defining functions/variables.
return 0 2>/dev/null || exit 0
