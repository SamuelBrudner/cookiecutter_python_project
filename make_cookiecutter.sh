#!/usr/bin/env bash
# make_cookiecutter.sh
#
# Generate a Cookiecutter template for a reproducible
# neuroscience / data-science project layout.
#
# Usage:
#   ./make_cookiecutter.sh  [template_dir]
#
# If no argument is given, the template is written to
# ./cookiecutter-neuro-project

set -euo pipefail

TEMPLATE_DIR="${1:-cookiecutter-neuro-project}"

################################################################################
# 1. Basic parameters for the cookiecutter.json file
################################################################################
read -r -d '' CC_JSON <<'JSON'
{
  "project_name": "My Awesome Project",
  "project_slug": "{{ cookiecutter.project_name.lower().replace(' ', '_') }}",
  "pkg_name": "{{ cookiecutter.project_slug }}",
  "default_branch": "main",
  "description": "Reproducible research project",
  "author_name": "Sam Brudner",
  "license": ["MIT", "BSD-3-Clause", "Apache-2.0"],
  "python_version": "3.11",
  "enable_docker": ["no", "yes"],
  "_copy_without_render": [
    "docs/**",
    "reference/supplementary_native/**",
    "data/**",
    "metadata/**",
    "notebooks/exploratory/**"
  ]
}
JSON

################################################################################
# 2. Directory / file helpers
################################################################################
make_dir()  { mkdir -p "$TEMPLATE_DIR/$1"; }
make_file() { mkdir -p "$(dirname "$TEMPLATE_DIR/$1")" && printf '%s\n' "$2" > "$TEMPLATE_DIR/$1"; }

################################################################################
# 3. Create skeleton
################################################################################
echo "Creating template in: $TEMPLATE_DIR"
rm -rf "$TEMPLATE_DIR"
make_dir ""

# ── 3.1 cookiecutter.json ─────────────────────────────────────────────────────
make_file "cookiecutter.json" "$CC_JSON"

# ── 3.2 top-level docs & configs ──────────────────────────────────────────────
make_file "{{ cookiecutter.project_slug }}/README.md" "# {{ cookiecutter.project_name }}\n\n{{ cookiecutter.description }}\n"
make_file "{{ cookiecutter.project_slug }}/CITATION.cff" "cff-version: 1.2.0\nmessage: \"If you use this work, please cite it.\"\n"
make_file "{{ cookiecutter.project_slug }}/environment.yml" "name: {{ cookiecutter.project_slug }}\ndependencies:\n  - python={{ cookiecutter.python_version }}\n  - pip\n"
make_file "{{ cookiecutter.project_slug }}/conda-lock.yml"  "# generated by conda-lock"
make_file "{{ cookiecutter.project_slug }}/.pre-commit-config.yaml" "repos: []\n"
make_file "{{ cookiecutter.project_slug }}/dvc.yaml" "stages: {}\n"
make_file "{{ cookiecutter.project_slug }}/.gitignore" ".venv/\n__pycache__/\n"

# Setup environment script
read -r -d '' SETUP_ENV_SH <<'SETUP_ENV_SH'
#!/usr/bin/env bash
# setup_env.sh – manage the Conda env for {{ cookiecutter.pkg_name }}
# Generated from the cookiecutter-neuro-project template (v{{ cookiecutter.cookiecutter_template_version|default("0.1.0") }})

set -euo pipefail

# ── Pretty colours ────────────────────────────────────────────────────────────
GREEN='\033[0;32m'; YELLOW='\033[1;33m'; RED='\033[0;31m'; NC='\033[0m'

# ── Paths & helpers ───────────────────────────────────────────────────────────
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ENV_PATH="${SCRIPT_DIR}/.env"

section() { printf "\n${GREEN}=== %s ===${NC}\n" "$1"; }
die()     { printf "${RED}Error: %s${NC}\n" "$1" >&2; exit 1; }
run()     { printf "${YELLOW}Running: %s${NC}\n" "$*"; "$@" || die "Command failed: $*"; }

# ── 1. Conda availability ────────────────────────────────────────────────────
section "Setting up {{ cookiecutter.pkg_name }} environment"
command -v conda >/dev/null 2>&1 || \
  die "conda is not installed. Install Miniconda first: https://docs.conda.io/en/latest/miniconda.html"

CONDA_BASE=$(conda info --base)
# shellcheck source=/dev/null
source "${CONDA_BASE}/etc/profile.d/conda.sh"

# ── 2. Create or update env ──────────────────────────────────────────────────
if [[ ! -d "${ENV_PATH}" ]]; then
  section "Creating new env at ${ENV_PATH}"
  [[ -f "${SCRIPT_DIR}/environment.yml" ]] || die "environment.yml missing"
  conda env create -f "${SCRIPT_DIR}/environment.yml" --prefix "${ENV_PATH}" || die "conda env create failed"
else
  section "Updating existing env"
  conda env update -f "${SCRIPT_DIR}/environment.yml" --prefix "${ENV_PATH}" || die "conda env update failed"
fi

# ── 3. Activate and install dev extras ───────────────────────────────────────
conda activate "${ENV_PATH}" || die "activate failed"
run pip install -e "${SCRIPT_DIR}[dev]"

# ── 4. Pre-commit hooks ──────────────────────────────────────────────────────
section "pre-commit hooks"
if ! command -v pre-commit &>/dev/null; then
  echo -e "${YELLOW}pre-commit not found – installing...${NC}"
  conda install -y -c conda-forge pre-commit || pip install pre-commit
fi
pre-commit install && echo -e "${GREEN}✓ pre-commit installed${NC}"

# ── 5. Generate conda-lock (explicit) for reproducibility ────────────────────
section "conda-lock"
if ! command -v conda-lock &>/dev/null; then
  echo -e "${YELLOW}conda-lock not found – installing...${NC}"
  conda install -y -c conda-forge conda-lock || true
fi

if command -v conda-lock &>/dev/null; then
  PLATFORM=$(conda info --json | jq -r '.platform') 2>/dev/null || PLATFORM="auto"
  TMP_ENV="$(mktemp)"
  grep -vE '^  - pip' "${SCRIPT_DIR}/environment.yml" > "${TMP_ENV}"
  conda-lock -f "${TMP_ENV}" -p "${PLATFORM}" -k explicit -o "${SCRIPT_DIR}/conda-lock.yml" \
    && echo -e "${GREEN}✓ conda-lock.yml generated${NC}"
  rm -f "${TMP_ENV}"
else
  echo -e "${YELLOW}Skipping conda-lock (tool unavailable)${NC}"
fi

# ── 6. Optional test run ─────────────────────────────────────────────────────
section "Verification"
read -rp "Run tests now? [y/N] " REPLY; echo
if [[ "$REPLY" =~ ^[Yy]$ ]]; then
  echo -e "${YELLOW}Running pytest…${NC}"
  pytest -v --cov={{ cookiecutter.pkg_name }} --cov-report=term-missing || \
    echo -e "${YELLOW}⚠ Some tests failed (may be expected)${NC}"
fi

# ── 7. Final notes ────────────────────────────────────────────────────────────
section "Done!"
echo -e "${YELLOW}Activate with:${NC}   conda activate \"${ENV_PATH}\""
echo -e "${YELLOW}Alias idea:${NC}       alias act_{{ cookiecutter.pkg_name }}='conda activate \"${ENV_PATH}\"'"
echo -e "${YELLOW}pre-commit hooks are installed – they'll run on every commit.${NC}"
SETUP_ENV_SH

make_file "{{ cookiecutter.project_slug }}/setup_env.sh" "$SETUP_ENV_SH"

make_file "{{ cookiecutter.project_slug }}/Dockerfile" \
'FROM mambaorg/micromamba:1.5.1\nCOPY environment.yml /tmp/\nRUN micromamba install -y -f /tmp/environment.yml && micromamba clean -a -y\n'

# Optional Dockerfile

# ── 3.3 Source code package ───────────────────────────────────────────────────
make_dir "{{ cookiecutter.project_slug }}/src/{{ cookiecutter.pkg_name }}"
make_file "{{ cookiecutter.project_slug }}/src/{{ cookiecutter.pkg_name }}/__init__.py" "\"\"\"{{ cookiecutter.description }}\"\"\""

# ── 3.4 Configuration (Hydra) ────────────────────────────────────────────────
make_dir "{{ cookiecutter.project_slug }}/conf/default"
make_dir "{{ cookiecutter.project_slug }}/conf/experiment"
make_file "{{ cookiecutter.project_slug }}/conf/default/config.yaml" "defaults:\n  - _self_\n"
make_file "{{ cookiecutter.project_slug }}/conf/experiment/README.md" "# Experiment-specific overrides\n"

# ── 3.5 Notebook areas ───────────────────────────────────────────────────────
for nb in exploratory demos pipelines; do
  make_dir "{{ cookiecutter.project_slug }}/notebooks/$nb"
done

# ── 3.6 Data, metadata, reference docs ───────────────────────────────────────
make_dir "{{ cookiecutter.project_slug }}/data"
make_dir "{{ cookiecutter.project_slug }}/metadata"
make_file "{{ cookiecutter.project_slug }}/metadata/people.csv" "person_id,name,role\n"
make_file "{{ cookiecutter.project_slug }}/metadata/projects.csv" "project_id,name,description\n"
make_file "{{ cookiecutter.project_slug }}/metadata/deliverables.csv" "deliverable_id,name,status\n"

make_dir "{{ cookiecutter.project_slug }}/reference/supplementary_native"
make_dir "{{ cookiecutter.project_slug }}/reference/supplementary_md"
make_file "{{ cookiecutter.project_slug }}/reference/goals_core.md" "# Core Goals\n"
make_file "{{ cookiecutter.project_slug }}/reference/goals_extended.md" "# Extended Goals\n"

# ── 3.7 Checklists, workflow DAG, tools, tests, docs ─────────────────────────
make_dir "{{ cookiecutter.project_slug }}/checklists"
make_file "{{ cookiecutter.project_slug }}/checklists/example.yaml" "# Tasks\n- description: example\n  done: false\n"

make_dir "{{ cookiecutter.project_slug }}/workflow"
make_file "{{ cookiecutter.project_slug }}/workflow/README.md" "This directory holds Kedro/Snakemake pipelines.\n"

make_dir "{{ cookiecutter.project_slug }}/tools"
make_file "{{ cookiecutter.project_slug }}/tools/.gitkeep" ""

make_dir "{{ cookiecutter.project_slug }}/tests"
make_file "{{ cookiecutter.project_slug }}/tests/test_placeholder.py" "def test_placeholder():\n    assert True\n"

make_dir "{{ cookiecutter.project_slug }}/docs"
make_file "{{ cookiecutter.project_slug }}/docs/index.md" "# {{ cookiecutter.project_name }} documentation\n"

echo "✅  Cookiecutter template ready: $TEMPLATE_DIR"
